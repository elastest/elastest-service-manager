{
	"info": {
		"_postman_id": "c15b8662-0cb9-95db-0d3d-ae17746ee48e",
		"name": "ElasTest Service Manager API",
		"description": "This is the service manager API. It is an extension of the the Open Service Broker API (v2.12). The Open Service Broker API defines the contract between the a requesting client and the service broker. The broker is expected to implement several HTTP (or HTTPS) endpoints underneath a URI prefix. One or more services can be provided by a single broker, and load balancing enables horizontal scalability of redundant brokers. Multiple service provider instances can be supported by a single broker using different URL prefixes and credentials. [Learn more about the Service Broker API.] (https://github.com/openservicebrokerapi/servicebroker/). Note the [topic on orphan resolution](https://github.com/openservicebrokerapi/servicebroker/blob/master/_spec.md#orphans). It is not dealt with in this spec.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v2",
			"description": "Folder for v2",
			"item": [
				{
					"name": "Registers a service with the broker's catalog.",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"this is a test service\",\n  \"id\": \"test\",\n  \"name\": \"test_svc\",\n  \"bindable\": false,\n  \"plan_updateable\": false,\n  \"plans\": [\n    {\n      \"bindable\": false,\n      \"description\": \"plan for testing\",\n      \"free\": true,\n      \"id\": \"testplan\",\n      \"name\": \"testing plan\",\n      \"metadata\": {\n        \"costs\": {\n          \"name\": \"On Demand 5 + Charges\",\n          \"type\": \"ONDEMAND\",\n          \"fix_cost\": {\n            \"deployment\": 5\n          },\n          \"var_rate\": {\n            \"disk\": 1,\n            \"memory\": 10,\n            \"cpus\": 50\n          },\n          \"components\": {\n          },\n          \"description\": \"On Demand 5 per deployment, 50 per core, 10 per GB ram and 1 per GB disk\"\n        },\n        \"bullets\": \"basic plan\"\n      }\n    }\n  ],\n  \"requires\": [],\n  \"tags\": [\n    \"test\",\n    \"tester\"\n  ]\n}\n"
						},
						"url": {
							"raw": "http://localhost:8080/v2/et/catalog",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"et",
								"catalog"
							]
						},
						"description": "Service providers need a means to register their service with a service broker. This provides this functionality. Also using PUT a service provider can update their registration. Note that this requires the complete content and will REPLACE the existing service information registered with the broker.\n"
					},
					"response": []
				},
				{
					"name": "Gets services registered within the broker",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/v2/catalog",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"catalog"
							]
						},
						"description": "\"The first endpoint that a broker must implement is the service catalog. The client will initially fetch this endpoint from all brokers and make adjustments to the user-facing service catalog stored in the a client database. \\n\"\n"
					},
					"response": []
				},
				{
					"name": "Register a service manifest with the Broker",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"test-mani\",\n  \"manifest_content\": \"version: '2'</br></br>services:</br>  spark-master:</br>    image: elastest/ebs-spark-base:0.5.0</br>    container_name: spark-master</br>    ports:</br>      - \\\"8080:8080\\\"</br>    volumes:</br>      - ./spark/alluxio_conf:/opt/alluxio/conf</br>      - ./spark/spark_conf:/opt/spark/conf</br>      - ./spark/hadoop_conf:/usr/local/hadoop/etc/hadoop</br>    command: [\\\"/usr/bin/supervisord\\\", \\\"--configuration=/opt/conf/master.conf\\\"]</br>    hostname: spark-master</br>    networks:</br>      - elastest</br></br>  spark-worker:</br>    image: elastest/ebs-spark-base:0.5.0</br>    depends_on:</br>      - spark-master</br>    ports:</br>      - \\\"8081\\\"</br>    volumes:</br>      - ./spark/alluxio_conf:/opt/alluxio/conf</br>      - ./spark/spark_conf:/opt/spark/conf</br>      - ./spark/hadoop_conf:/usr/local/hadoop/etc/hadoop</br>    command: [\\\"/usr/bin/supervisord\\\", \\\"--configuration=/opt/conf/slave.conf\\\"]</br>    hostname: spark-worker</br>    networks:</br>      - elastest</br></br>networks:</br>  elastest:</br>    external: true</br>\",\n  \"manifest_type\": \"dummy\",\n  \"plan_id\": \"testplan\",\n  \"service_id\": \"test-svc\"\n}\n"
						},
						"url": {
							"raw": "http://localhost:8080/v2/et/manifest/test_manifest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"et",
								"manifest",
								"test_manifest"
							]
						},
						"description": "takes deployment description of a software service and associates with a service and plan that is already registered in the service catalog."
					},
					"response": []
				},
				{
					"name": "Gets manifests registered within the broker",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/v2/catalog",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"catalog"
							]
						},
						"description": "\"The first endpoint that a broker must implement is the service catalog. The client will initially fetch this endpoint from all brokers and make adjustments to the user-facing service catalog stored in the a client database. \\n\"\n"
					},
					"response": []
				},
				{
					"name": "Provisions an EUS service instance",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organization_guid\": \"org\",\n  \"plan_id\": \"b4cfc681-0e28-41f0-b88c-dde69169a256\",\n  \"service_id\": \"29216b91-497c-43b7-a5c4-6613f13fa0e9\",\n  \"space_guid\": \"space\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_eus_service_instance?accept_incomplete=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_eus_service_instance"
							],
							"query": [
								{
									"key": "accept_incomplete",
									"value": "false"
								}
							]
						},
						"description": "When the broker receives a provision request from a client, it should synchronously take whatever action is necessary to create a new service resource for the developer. The result of provisioning varies by service type, although there are a few common actions that work for many services. Supports asynchronous operations.'\n"
					},
					"response": []
				},
				{
					"name": "Provisions an EDS service instance",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organization_guid\": \"org\",\n  \"plan_id\": \"94a1a0c7-21a0-42e3-abcd-f75f337b47c5\",\n  \"service_id\": \"fe5e0531-b470-441f-9c69-721c2b4875f2\",\n  \"space_guid\": \"space\"\n}\n\n"
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_eds_service_instance?accept_incomplete=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_eds_service_instance"
							],
							"query": [
								{
									"key": "accept_incomplete",
									"value": "false"
								}
							]
						},
						"description": "When the broker receives a provision request from a client, it should synchronously take whatever action is necessary to create a new service resource for the developer. The result of provisioning varies by service type, although there are a few common actions that work for many services. Supports asynchronous operations.'\n"
					},
					"response": []
				},
				{
					"name": "Provisions an EMS service instance",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organization_guid\": \"org\",\n  \"plan_id\": \"9b7dd476-462f-4a56-81b0-eccee8917cf7\",\n  \"service_id\": \"bab3ae67-8c1d-46ec-a940-94183a443825\",\n  \"space_guid\": \"space\"\n}\n\n"
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_ems_service_instance?accept_incomplete=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_ems_service_instance"
							],
							"query": [
								{
									"key": "accept_incomplete",
									"value": "false"
								}
							]
						},
						"description": "When the broker receives a provision request from a client, it should synchronously take whatever action is necessary to create a new service resource for the developer. The result of provisioning varies by service type, although there are a few common actions that work for many services. Supports asynchronous operations.'\n"
					},
					"response": []
				},
				{
					"name": "Provisions an EBS service instance",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organization_guid\": \"org\",\n  \"plan_id\": \"f6ed4b3e-e132-47b6-af71-26dbb76e59cb\",\n  \"service_id\": \"a1920b13-7d11-4ebc-a732-f86a108ea49c\",\n  \"space_guid\": \"space\"\n}\n\n"
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_ebs_service_instance?accept_incomplete=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_ebs_service_instance"
							],
							"query": [
								{
									"key": "accept_incomplete",
									"value": "false"
								}
							]
						},
						"description": "When the broker receives a provision request from a client, it should synchronously take whatever action is necessary to create a new service resource for the developer. The result of provisioning varies by service type, although there are a few common actions that work for many services. Supports asynchronous operations.'\n"
					},
					"response": []
				},
				{
					"name": "Provisions an ESS service instance",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organization_guid\": \"org\",\n  \"plan_id\": \"cfd3ebd1-5afa-420d-8313-43d681168cf7\",\n  \"service_id\": \"af7947d9-258b-4dd1-b1ca-17450db25ef7\",\n  \"space_guid\": \"space\"\n}\n\n"
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_ess_service_instance?accept_incomplete=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_ess_service_instance"
							],
							"query": [
								{
									"key": "accept_incomplete",
									"value": "false"
								}
							]
						},
						"description": "When the broker receives a provision request from a client, it should synchronously take whatever action is necessary to create a new service resource for the developer. The result of provisioning varies by service type, although there are a few common actions that work for many services. Supports asynchronous operations.'\n"
					},
					"response": []
				},
				{
					"name": "Returns information about the service instance.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12"
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/v2/et/service_instances/test_service_instance",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"et",
								"service_instances",
								"test_service_instance"
							]
						},
						"description": "Returns information about the service instance. This is a simple read operation against the broker database and is provided as a developer/consumer convienence.\n"
					},
					"response": []
				},
				{
					"name": "Gets the current state of the last operation",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12",
								"description": "OSBA Version"
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_service_instance/last_operation?service_id=test&plan_id=testplan&operation=test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_service_instance",
								"last_operation"
							],
							"query": [
								{
									"key": "service_id",
									"value": "test"
								},
								{
									"key": "plan_id",
									"value": "testplan"
								},
								{
									"key": "operation",
									"value": "test"
								}
							]
						},
						"description": "\"When a broker returns status code 202 ACCEPTED for provision, update, or deprovision, the client will begin to poll the /v2/service_instances/:guid/last_operation endpoint to obtain the state of the last requested operation. The broker response must contain the field state and an optional field description.\"\n"
					},
					"response": []
				},
				{
					"name": "Deprovisions a service instance.",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Broker-Api-Version",
								"value": "2.12",
								"description": "OSBA Version"
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/test_service_instance?service_id=test&plan_id=testplan&accept_incomplete=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								"test_service_instance"
							],
							"query": [
								{
									"key": "service_id",
									"value": "test"
								},
								{
									"key": "plan_id",
									"value": "testplan"
								},
								{
									"key": "accept_incomplete",
									"value": "false"
								}
							]
						},
						"description": "'When a broker receives a deprovision request from a client, it should delete any resources it created during the provision. Usually this means that all resources are immediately reclaimed for future provisions.'\n"
					},
					"response": []
				},
				{
					"name": "Binds to a service",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/:instance_id/service_bindings/:binding_id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								":instance_id",
								"service_bindings",
								":binding_id"
							],
							"variable": [
								{
									"key": "instance_id",
									"value": ""
								},
								{
									"key": "binding_id",
									"value": ""
								}
							]
						},
						"description": "When the broker receives a bind request from the client, it should return information which helps an application to utilize the provisioned resource. This information is generically referred to as credentials. Applications should be issued unique credentials whenever possible, so one application access can be revoked without affecting other bound applications.\n"
					},
					"response": []
				},
				{
					"name": "Unbinds a service",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/:instance_id/service_bindings/:binding_id?service_id={{service_id}}&plan_id={{plan_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								":instance_id",
								"service_bindings",
								":binding_id"
							],
							"query": [
								{
									"key": "service_id",
									"value": "{{service_id}}"
								},
								{
									"key": "plan_id",
									"value": "{{plan_id}}"
								}
							],
							"variable": [
								{
									"key": "instance_id",
									"value": ""
								},
								{
									"key": "binding_id",
									"value": ""
								}
							]
						},
						"description": "When a broker receives an unbind request from the client, it should delete any resources it created in bind. Usually this means that an application immediately cannot access the resource.\n"
					},
					"response": []
				},
				{
					"name": "Updating a Service Instance",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/v2/service_instances/:instance_id?accept_incomplete={{accept_incomplete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v2",
								"service_instances",
								":instance_id"
							],
							"query": [
								{
									"key": "accept_incomplete",
									"value": "{{accept_incomplete}}"
								}
							],
							"variable": [
								{
									"key": "instance_id",
									"value": ""
								}
							]
						},
						"description": "Brokers that implement this endpoint can enable users to modify attributes of an existing service instance. The first attribute supports users modifying is the service plan. This effectively enables users to upgrade or downgrade their service instance to other plans. To see how users make these requests.'\n"
					},
					"response": []
				}
			]
		}
	]
}