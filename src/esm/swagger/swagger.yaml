---
swagger: "2.0"
info:
  description: "This is the service manager API. It is an extension of the the Open\
    \ Service Broker API (v2.12). The Open Service Broker API defines the contract\
    \ between the a requesting client and the service broker. The broker is expected\
    \ to implement several HTTP (or HTTPS) endpoints underneath a URI prefix. One\
    \ or more services can be provided by a single broker, and load balancing enables\
    \ horizontal scalability of redundant brokers. Multiple service provider instances\
    \ can be supported by a single broker using different URL prefixes and credentials.\
    \ [Learn more about the Service Broker API.] (https://github.com/openservicebrokerapi/servicebroker/).\
    \ Note the [topic on orphan resolution](https://github.com/openservicebrokerapi/servicebroker/blob/master/_spec.md#orphans).\
    \ It is not dealt with in this spec. Swagger file copyright: Copyright Â© 2017-2019\
    \ Zuercher Hochschule fuer Angewandte Wissenschaften.\n"
  version: "2.12"
  title: "ElasTest Service Manager API"
  contact:
    name: "ElasTest"
    url: "https://github.com/elastest/bugtracker"
    email: "elastest-users@googlegroups.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
schemes:
- "http"
- "https"
security:
- basicAuth: []
paths:
  /v2/catalog:
    get:
      tags:
      - "catalog"
      summary: "Gets services registered within the broker"
      description: "\"The first endpoint that a broker must implement is the service\
        \ catalog. The client will initially fetch this endpoint from all brokers\
        \ and make adjustments to the user-facing service catalog stored in the a\
        \ client database. \\n\"\n"
      operationId: "catalog"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Catalog"
      x-swagger-router-controller: "esm.controllers.catalog_controller"
  /v2/et/catalog:
    put:
      tags:
      - "catalog"
      summary: "Registers the service with the catalog."
      description: "Service providers need a means to register their service with\
        \ a service broker. This provides this functionality. Also using PUT a service\
        \ provider can update their registration. Note that this requires the complete\
        \ content and will REPLACE the existing service information registered with\
        \ the broker.\n"
      operationId: "register_service"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "service"
        description: "the service description to register"
        required: true
        schema:
          $ref: "#/definitions/ServiceType"
      responses:
        200:
          description: "Successful registration. Has an empty body"
          schema:
            $ref: "#/definitions/Empty"
        409:
          description: "'The requested service type already exists. The ID of the\
            \ service exists in the catalog already'\n"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.catalog_controller"
    delete:
      tags:
      - "catalog"
      summary: "Deletes a registered service type"
      description: "Deletes a service that is already registered with the service\
        \ manager. It does not delete the manifest or plan associated with the service\
        \ type.\n"
      operationId: "delete_service_type"
      produces:
      - "application/json"
      parameters:
      - name: "service_id"
        in: "query"
        description: "service ID to be deprovisioned"
        required: true
        type: "string"
      responses:
        200:
          description: "MUST be returned if the service type was deleted as a result\
            \ of this request. The expected response body is {}.\n"
          schema:
            $ref: "#/definitions/Empty"
        202:
          description: "MUST be returned if the service type deletion is in progress.\n"
          schema:
            $ref: "#/definitions/Empty"
        404:
          description: "Should be returned if the type does not exist. The expected\
            \ response body is {}.\n"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.catalog_controller"
  /v2/et/manifest:
    get:
      tags:
      - "catalog"
      summary: "returns a list of manifests registered at with the ESM"
      description: "returns a list of manifests registered at with the ESM"
      operationId: "list_manifests"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "List of manifests"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Manifest"
      x-swagger-router-controller: "esm.controllers.catalog_controller"
  /v2/et/manifest/{manifest_id}:
    get:
      tags:
      - "catalog"
      summary: "returns a specific of manifest registered at with the ESM"
      description: "hi!"
      operationId: "get_manifest"
      produces:
      - "application/json"
      parameters:
      - name: "manifest_id"
        in: "path"
        description: "The manifest_id of a manifest to be associated with a plan of\
          \ a servicetype.\n"
        required: true
        type: "string"
      responses:
        200:
          description: "The requested manifest"
          schema:
            $ref: "#/definitions/Manifest"
      x-swagger-router-controller: "esm.controllers.catalog_controller"
    put:
      tags:
      - "catalog"
      summary: "takes deployment description of a software service and associates\
        \ with a service and plan"
      description: "takes deployment description of a software service and associates\
        \ with a service and plan that is already registered in the service catalog."
      operationId: "store_manifest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "manifest_id"
        in: "path"
        description: "The manifest_id of a manifest to be associated with a plan of\
          \ a servicetype.\n"
        required: true
        type: "string"
      - in: "body"
        name: "manifest"
        description: "the manifest to store"
        required: true
        schema:
          $ref: "#/definitions/Manifest"
      responses:
        200:
          description: "Successful registration. Has an empty body"
          schema:
            $ref: "#/definitions/Empty"
        409:
          description: "'The requested manifest already exists. The ID of the manifest\
            \ exists in the catalog already'\n"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.catalog_controller"
  /v2/service_instances/{instance_id}:
    put:
      tags:
      - "service_instances"
      summary: "Provisions a service instance"
      description: "When the broker receives a provision request from a client, it\
        \ should synchronously take whatever action is necessary to create a new service\
        \ resource for the developer. The result of provisioning varies by service\
        \ type, although there are a few common actions that work for many services.\
        \ Supports asynchronous operations.'\n"
      operationId: "create_service_instance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      - in: "body"
        name: "service"
        description: "Service information."
        required: true
        schema:
          $ref: "#/definitions/ServiceRequest"
      - name: "accept_incomplete"
        in: "query"
        description: "Indicates that the client is supporting asynchronous operations"
        required: false
        type: "boolean"
      responses:
        200:
          description: "\"May be returned if the service instance already exists and\
            \ the requested parameters are identical to the existing service instance.\
            \ The expected response body is below.\"\n"
          schema:
            $ref: "#/definitions/ServiceResponse"
        201:
          description: "Service instance has been created."
          schema:
            $ref: "#/definitions/ServiceResponse"
        202:
          description: "Service instance is being created - asynchronous operation"
          schema:
            $ref: "#/definitions/LastOperation"
        409:
          description: "'The requested service instance already exists.'\n"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "This service plan requires client support for asynchronous\
            \ service operations."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
    delete:
      tags:
      - "service_instances"
      summary: "Deprovisions a service instance."
      description: "'When a broker receives a deprovision request from a client, it\
        \ should delete any resources it created during the provision. Usually this\
        \ means that all resources are immediately reclaimed for future provisions.'\n"
      operationId: "deprovision_service_instance"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      - name: "service_id"
        in: "query"
        description: "service ID to be deprovisioned"
        required: true
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "plan ID of the service to be deprovisioned"
        required: true
        type: "string"
      - name: "accept_incomplete"
        in: "query"
        description: "Indicates that the client is supporting asynchronous operations"
        required: false
        type: "boolean"
      responses:
        200:
          description: "MUST be returned if the service instance was deleted as a\
            \ result of this request. The expected response body is {}.\n"
          schema:
            $ref: "#/definitions/UpdateOperationResponse"
        202:
          description: "MUST be returned if the service instance deletion is in progress.\
            \ This triggers the marketplace to poll the Service Instance Last Operation\
            \ Endpoint for operation status. Note that a re-sent DELETE request MUST\
            \ return a 202 Accepted, not a 200 OK, if the delete request has not completed\
            \ yet.\n"
          schema:
            $ref: "#/definitions/LastOperation"
        410:
          description: "Should be returned if the binding does not exist. The expected\
            \ response body is {}.\n"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "'May be returned if the particular plan change requested is\
            \ not supported or if the request cannot currently be fulfilled due to\
            \ the state of the instance (eg. instance utilization is over the quota\
            \ of the requested plan). Broker should include a user-facing message\
            \ in the body. Additionally, a 422 can also be returned if the broker\
            \ only supports asynchronous update for the requested plan and the request\
            \ did not include ?accepts_incomplete=true. The expected response body\
            \ is: { \"error\": \"AsyncRequired\", \"description\": \"This service\
            \ plan requires client support for asynchronous service operations.\"\
            \ }.'\n"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
    patch:
      tags:
      - "service_instances"
      summary: "Updating a Service Instance"
      description: "Brokers that implement this endpoint can enable users to modify\
        \ attributes of an existing service instance. The first attribute supports\
        \ users modifying is the service plan. This effectively enables users to upgrade\
        \ or downgrade their service instance to other plans. To see how users make\
        \ these requests.'\n"
      operationId: "update_service_instance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      - in: "body"
        name: "plan"
        description: "New Plan information."
        required: true
        schema:
          $ref: "#/definitions/UpdateRequest"
      - name: "accept_incomplete"
        in: "query"
        description: "Indicates that the client is supporting asynchronous operations"
        required: false
        type: "boolean"
      responses:
        200:
          description: "New plan is effective. The expected response body is {}."
          schema:
            $ref: "#/definitions/Empty"
        202:
          description: "Service instance is being updated - asynchronous operation"
          schema:
            $ref: "#/definitions/LastOperation"
        422:
          description: "May be returned if the particular plan change requested is\
            \ not supported or if the request cannot currently be fulfilled due to\
            \ the state of the instance (eg. instance utilization is over the quota\
            \ of the requested plan). Broker should include a user-facing message\
            \ in the body. Additionally, a 422 can also be returned if the broker\
            \ only supports asynchronous update for the requested plan and the request\
            \ did not include ?accepts_incomplete=true. The expected response body\
            \ is: { \"error\": \"AsyncRequired\", \"description\": \"This service\
            \ plan requires client support for asynchronous service operations.\"\
            \ }.'\n"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
  /v2/et/service_instances:
    get:
      tags:
      - "service_instances"
      summary: "Returns information about the service instance."
      description: "Returns all service instances that are accessible to the end-user\
        \ on this service manager.\n"
      operationId: "all_instance_info"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "a list of service descriptions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceInstance"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
  /v2/et/service_instances/{instance_id}:
    get:
      tags:
      - "service_instances"
      summary: "Returns information about the service instance."
      description: "Returns information about the service instance. This is a simple\
        \ read operation against the broker database and is provided as a developer/consumer\
        \ convienence.\n"
      operationId: "instance_info"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      responses:
        200:
          description: "service description"
          schema:
            $ref: "#/definitions/ServiceInstance"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
  /v2/service_instances/{instance_id}/last_operation:
    get:
      tags:
      - "service_instances"
      summary: "Gets the current state of the last operation upon the specified resource."
      description: "\"When a broker returns status code 202 ACCEPTED for provision,\
        \ update, or deprovision, the client will begin to poll the /v2/service_instances/:guid/last_operation\
        \ endpoint to obtain the state of the last requested operation. The broker\
        \ response must contain the field state and an optional field description.\"\
        \n"
      operationId: "last_operation_status"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      - name: "service_id"
        in: "query"
        description: "ID of the service from the catalog."
        required: false
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "ID of the plan from the catalog."
        required: false
        type: "string"
      - name: "operation"
        in: "query"
        description: "\"A broker-provided identifier for the operation. When a value\
          \ for operation is included with asynchronous responses for Provision, Update,\
          \ and Deprovision requests, the broker client should provide the same value\
          \ using this query parameter as a URL-encoded string.\"\n"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LastOperation"
        410:
          description: "\"Appropriate only for asynchronous delete requests. The client\
            \ will consider this response a success and remove the resource from its\
            \ database. The expected response body is {}. Returning this while the\
            \ client is polling for create or update operations will be interpreted\
            \ as an invalid response and the client will continue polling.\"\n"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
  /v2/service_instances/{instance_id}/service_bindings/{binding_id}:
    put:
      tags:
      - "service_instances"
      summary: "Binds to a service"
      description: "When the broker receives a bind request from the client, it should\
        \ return information which helps an application to utilize the provisioned\
        \ resource. This information is generically referred to as credentials. Applications\
        \ should be issued unique credentials whenever possible, so one application\
        \ access can be revoked without affecting other bound applications.\n"
      operationId: "service_bind"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      - name: "binding_id"
        in: "path"
        description: "The binding_id of a service binding is provided by the Cloud\
          \ Controller."
        required: true
        type: "string"
      - in: "body"
        name: "binding"
        required: true
        schema:
          $ref: "#/definitions/BindingRequest"
      responses:
        200:
          description: "May be returned if the binding already exists and the requested\
            \ parameters are identical to the existing binding.\n"
          schema:
            $ref: "#/definitions/BindingResponse"
        201:
          description: "Binding has been created."
          schema:
            $ref: "#/definitions/BindingResponse"
        409:
          description: "'Should be returned if the requested binding already exists.\
            \ The expected response body is {}, though the description field can be\
            \ used to return a user-facing error message.\n"
          schema:
            $ref: "#/definitions/Empty"
        422:
          description: "Should be returned if the broker requires that app_guid be\
            \ included in the request body. The expected response body is: { \"error\"\
            : \"RequiresApp\", \"description\": \"This service supports generation\
            \ of credentials through binding an application only.\" }\n"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
    delete:
      tags:
      - "service_instances"
      summary: "Unbinds a service"
      description: "When a broker receives an unbind request from the client, it should\
        \ delete any resources it created in bind. Usually this means that an application\
        \ immediately cannot access the resource.\n"
      operationId: "service_unbind"
      produces:
      - "application/json"
      parameters:
      - name: "instance_id"
        in: "path"
        description: "'The instance_id of a service instance is provided by the client.\
          \ This ID will be used for future requests (bind and deprovision), so the\
          \ broker must use it to correlate the resource it creates.'\n"
        required: true
        type: "string"
      - name: "binding_id"
        in: "path"
        description: "The binding_id of a service binding is provided by the Cloud\
          \ Controller."
        required: true
        type: "string"
      - name: "service_id"
        in: "query"
        description: "ID of the service from the catalog."
        required: true
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "ID of the plan from the catalog."
        required: true
        type: "string"
      responses:
        200:
          description: "Binding was deleted. The expected response body is {}."
          schema:
            $ref: "#/definitions/Empty"
        410:
          description: "Should be returned if the binding does not exist. The expected\
            \ response body is {}.\n"
          schema:
            $ref: "#/definitions/Empty"
      x-swagger-router-controller: "esm.controllers.service_instances_controller"
securityDefinitions:
  basicAuth:
    description: "The open service broker specification requires basic authentication\
      \ on all requests. [See here](https://github.com/openservicebrokerapi/servicebroker/blob/v2.12/spec.md#authentication)\n"
    type: "basic"
definitions:
  Catalog:
    type: "object"
    required:
    - "services"
    properties:
      services:
        type: "array"
        items:
          $ref: "#/definitions/ServiceType"
    description: "list of service types"
    example:
      services:
      - bindable: true
        metadata:
          longDescription: "longDescription"
          documentationUrl: "documentationUrl"
          providerDisplayName: "providerDisplayName"
          displayName: "displayName"
          imageUrl: "imageUrl"
          supportUrl: "supportUrl"
          extras: "{}"
        plan_updateable: false
        plans:
        - metadata:
            costs: "{}"
            displayName: "displayName"
            extras: "{}"
            bullets: "bullets"
          bindable: true
          name: "name"
          description: "description"
          id: "id"
          free: true
        - metadata:
            costs: "{}"
            displayName: "displayName"
            extras: "{}"
            bullets: "bullets"
          bindable: true
          name: "name"
          description: "description"
          id: "id"
          free: true
        name: "name"
        description: "description"
        short_name: "short_name"
        id: "id"
        dashboard_client:
          id: "id"
          secret: "secret"
          redirect_uri: "redirect_uri"
        tags:
        - "tags"
        - "tags"
        requires:
        - "requires"
        - "requires"
      - bindable: true
        metadata:
          longDescription: "longDescription"
          documentationUrl: "documentationUrl"
          providerDisplayName: "providerDisplayName"
          displayName: "displayName"
          imageUrl: "imageUrl"
          supportUrl: "supportUrl"
          extras: "{}"
        plan_updateable: false
        plans:
        - metadata:
            costs: "{}"
            displayName: "displayName"
            extras: "{}"
            bullets: "bullets"
          bindable: true
          name: "name"
          description: "description"
          id: "id"
          free: true
        - metadata:
            costs: "{}"
            displayName: "displayName"
            extras: "{}"
            bullets: "bullets"
          bindable: true
          name: "name"
          description: "description"
          id: "id"
          free: true
        name: "name"
        description: "description"
        short_name: "short_name"
        id: "id"
        dashboard_client:
          id: "id"
          secret: "secret"
          redirect_uri: "redirect_uri"
        tags:
        - "tags"
        - "tags"
        requires:
        - "requires"
        - "requires"
  ServiceType:
    type: "object"
    required:
    - "bindable"
    - "description"
    - "id"
    - "name"
    - "plans"
    properties:
      id:
        type: "string"
        description: "An identifier used to correlate this service in future requests\
          \ to the broker. This MUST be globally unique within a platform marketplace.\
          \ MUST be a non-empty string. Using a GUID is RECOMMENDED.\n"
      name:
        type: "string"
        description: "A CLI-friendly name of the service. All lowercase, no spaces.\
          \ This MUST be globally unique within a platform marketplace. MUST be a\
          \ non-empty string.\n"
      short_name:
        type: "string"
        description: "the textual identifier, typically a 3 character acronym, used\
          \ for ElasTest services (e.g. elastest-monitoring-service is EMS)\n"
      description:
        type: "string"
        description: "A short description of the service. MUST be a non-empty string."
      bindable:
        type: "boolean"
        description: "Specifies whether service instances of the service can be bound\
          \ to applications. This specifies the default for all plans of this service.\
          \ Plans can override this field.\n"
      tags:
        type: "array"
        description: "Tags provide a flexible mechanism to expose a classification,\
          \ attribute, or base technology of a service, enabling equivalent services\
          \ to be swapped out without changes to dependent logic in applications,\
          \ buildpacks, or other services. E.g. mysql, relational, redis, key-value,\
          \ caching, messaging, amqp.\n"
        items:
          type: "string"
      metadata:
        description: "An opaque object of metadata for a service offering. Controller\
          \ treats this as a blob. Note that there are conventions in existing brokers\
          \ and controllers for fields that aid in the display of catalog data.\n"
        $ref: "#/definitions/ServiceMetadata"
      requires:
        type: "array"
        description: "A list of permissions that the user would have to give the service,\
          \ if they provision it. The only permissions currently supported are `syslog_drain`,\
          \ `route_forwarding` and `volume_mount`.\n"
        items:
          type: "string"
      plan_updateable:
        type: "boolean"
        description: "Whether the service supports upgrade/downgrade for some plans.\
          \ Please note that the misspelling of the attribute `plan_updatable` to\
          \ `plan_updateable` was done by mistake. We have opted to keep that misspelling\
          \ instead of fixing it and thus breaking backward compatibility. Defaults\
          \ to `false`.\n"
        default: false
      plans:
        type: "array"
        description: "A list of plans for this service, schema is defined below. MUST\
          \ contain at least one plan.\n"
        items:
          $ref: "#/definitions/Plan"
      dashboard_client:
        description: "Contains the data necessary to activate the Dashboard SSO feature\
          \ for this service.\n"
        $ref: "#/definitions/DashboardClient"
    description: "Schema of an offered service"
    example:
      bindable: true
      metadata:
        longDescription: "longDescription"
        documentationUrl: "documentationUrl"
        providerDisplayName: "providerDisplayName"
        displayName: "displayName"
        imageUrl: "imageUrl"
        supportUrl: "supportUrl"
        extras: "{}"
      plan_updateable: false
      plans:
      - metadata:
          costs: "{}"
          displayName: "displayName"
          extras: "{}"
          bullets: "bullets"
        bindable: true
        name: "name"
        description: "description"
        id: "id"
        free: true
      - metadata:
          costs: "{}"
          displayName: "displayName"
          extras: "{}"
          bullets: "bullets"
        bindable: true
        name: "name"
        description: "description"
        id: "id"
        free: true
      name: "name"
      description: "description"
      short_name: "short_name"
      id: "id"
      dashboard_client:
        id: "id"
        secret: "secret"
        redirect_uri: "redirect_uri"
      tags:
      - "tags"
      - "tags"
      requires:
      - "requires"
      - "requires"
  Plan:
    type: "object"
    required:
    - "description"
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        description: "An identifier used to correlate this plan in future requests\
          \ to the broker. This MUST be globally unique within a platform marketplace.\
          \ MUST be a non-empty string. Using a GUID is RECOMMENDED.\n"
      name:
        type: "string"
        description: "The CLI-friendly name of the plan. MUST be unique within the\
          \ service. All lowercase, no spaces. MUST be a non-empty string.\n"
      description:
        type: "string"
        description: "A short description of the plan. MUST be a non-empty string.\n"
      metadata:
        description: "An opaque object of metadata for a service plan. Controller\
          \ treats this as a blob. Note that there are conventions in existing brokers\
          \ and controllers for fields that aid in the display of catalog data. Note\
          \ - the ElasTest Cost model will be set here for the particular offered\
          \ service.\n"
        $ref: "#/definitions/PlanMetadata"
      free:
        type: "boolean"
        description: "When false, service instances of this plan have a cost. The\
          \ default is true.\n"
        default: true
      bindable:
        type: "boolean"
        description: "Specifies whether service instances of the service plan can\
          \ be bound to applications. This field is OPTIONAL. If specified, this takes\
          \ precedence over the bindable attribute of the service. If not specified,\
          \ the default is derived from the service.\n"
    description: "A plan for the service"
    example:
      metadata:
        costs: "{}"
        displayName: "displayName"
        extras: "{}"
        bullets: "bullets"
      bindable: true
      name: "name"
      description: "description"
      id: "id"
      free: true
  DashboardClient:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The id of the Oauth client that the dashboard will use. If present,\
          \ MUST be a non-empty string.\n"
      secret:
        type: "string"
        description: "A secret for the dashboard client. If present, MUST be a non-empty\
          \ string.\n"
      redirect_uri:
        type: "string"
        description: "A URI for the service dashboard. Validated by the OAuth token\
          \ server when the dashboard requests a token.\n"
    description: "Contains the data necessary to activate the Dashboard SSO feature\
      \ for this service"
    example:
      id: "id"
      secret: "secret"
      redirect_uri: "redirect_uri"
  ServiceRequest:
    type: "object"
    required:
    - "organization_guid"
    - "plan_id"
    - "service_id"
    - "space_guid"
    properties:
      service_id:
        type: "string"
        description: "The ID of the service (from the catalog). MUST be globally unique.\
          \ MUST be a non-empty string.\n"
      plan_id:
        type: "string"
        description: "The ID of the plan (from the catalog) for which the service\
          \ instance has been requested. MUST be unique to a service. MUST be a non-empty\
          \ string.\n"
      context:
        type: "object"
        description: "Platform specific contextual information under which the service\
          \ instance is to be provisioned. Although most brokers will not use this\
          \ field, it could be helpful in determining data placement or applying custom\
          \ business rules. context will replace `organization_guid` and `space_guid`\
          \ in future versions of the specification - in the interim both SHOULD be\
          \ used to ensure interoperability with old and new implementations.\n"
        properties: {}
      organization_guid:
        type: "string"
        description: "Deprecated in favor of context. The platform GUID for the organization\
          \ under which the service instance is to be provisioned. Although most brokers\
          \ will not use this field, it might be helpful for executing operations\
          \ on a user's behalf. MUST be a non-empty string.\n"
      space_guid:
        type: "string"
        description: "Deprecated in favor of context. The identifier for the project\
          \ space within the platform organization. Although most brokers will not\
          \ use this field, it might be helpful for executing operations on a user's\
          \ behalf. MUST be a non-empty string.\n"
      parameters:
        type: "object"
        description: "Configuration options for the service instance. Controller treats\
          \ this as a blob. Brokers SHOULD ensure that the client has provided valid\
          \ configuration parameters and values for the operation.\n"
        properties: {}
    description: "Request for a Service instance"
    example:
      service_id: "service_id"
      context: "{}"
      organization_guid: "organization_guid"
      space_guid: "space_guid"
      parameters: "{}"
      plan_id: "plan_id"
  ServiceResponse:
    type: "object"
    required:
    - "dashboard_url"
    properties:
      dashboard_url:
        type: "string"
        description: "The URL of a web-based management user interface for the service\
          \ instance; we refer to this as a service dashboard. The URL MUST contain\
          \ enough information for the dashboard to identify the resource being accessed\
          \ (9189kdfsk0vfnku in the example below). Note: a broker that wishes to\
          \ return dashboard_url for a service instance MUST return it with the initial\
          \ response to the provision request, even if the service is provisioned\
          \ asynchronously. If present, MUST be a non-empty string.\n"
      operation:
        type: "string"
        description: "For asynchronous responses, service brokers MAY return an identifier\
          \ representing the operation. The value of this field MUST be provided by\
          \ the platform with requests to the Last Operation endpoint in a URL encoded\
          \ query parameter. If present, MUST be a non-empty string.\n"
    description: "The URL of a web-based management user interface for the service\
      \ instance; we refer to this as a service dashboard. The URL should contain\
      \ enough information for the dashboard to identify the resource being accessed.\n"
    example:
      dashboard_url: "dashboard_url"
      operation: "operation"
  Empty:
    type: "string"
    description: "Expected empty response could be {}"
  UpdateRequest:
    type: "object"
    required:
    - "service_id"
    properties:
      context:
        type: "object"
        description: "Contextual data under which the service instance is created.\n"
        properties: {}
      service_id:
        type: "string"
        description: "The ID of the service (from the catalog). MUST be globally unique.\
          \ MUST be a non-empty string.\n"
      plan_id:
        type: "string"
        description: "The ID of the plan (from the catalog) for which the service\
          \ instance has been requested. MUST be unique to a service. If present,\
          \ MUST be a non-empty string. If this field is not present in the request\
          \ message, then the broker MUST NOT change the plan of the instance as a\
          \ result of this request.\n"
      parameters:
        type: "object"
        description: "Configuration options for the service instance. An opaque object,\
          \ controller treats this as a blob. Brokers SHOULD ensure that the client\
          \ has provided valid configuration parameters and values for the operation.\
          \ If this field is not present in the request message, then the broker MUST\
          \ NOT change the parameters of the instance as a result of this request.\n"
        properties: {}
      previous_values:
        description: "Information about the service instance prior to the update.\n"
        $ref: "#/definitions/PreviousValues"
    description: "New/Updated Plan to be added to a service."
    example:
      previous_values:
        service_id: "service_id"
        organization_id: "organization_id"
        space_id: "space_id"
        plan_id: "plan_id"
      service_id: "service_id"
      context: "{}"
      parameters: "{}"
      plan_id: "plan_id"
  PreviousValues:
    type: "object"
    properties:
      plan_id:
        type: "string"
        description: "ID of the plan prior to the update. If present, MUST be a non-empty\
          \ string.\n"
      service_id:
        type: "string"
        description: "Deprecated; determined to be unnecessary as the value is immutable.\
          \ ID of the service for the service instance. If present, MUST be a non-empty\
          \ string.\n"
      organization_id:
        type: "string"
        description: "Deprecated as it was redundant information. Organization for\
          \ the service instance MUST be provided by platforms in the top-level field\
          \ context. ID of the organization specified for the service instance. If\
          \ present, MUST be a non-empty string.\n"
      space_id:
        type: "string"
        description: "Deprecated as it was redundant information. Space for the service\
          \ instance MUST be provided by platforms in the top-level field context.\
          \ ID of the space specified for the service instance. If present, MUST be\
          \ a non-empty string.\n"
    description: "Information about the service instance prior to the update.\n"
    example:
      service_id: "service_id"
      organization_id: "organization_id"
      space_id: "space_id"
      plan_id: "plan_id"
  BindingRequest:
    type: "object"
    required:
    - "plan_id"
    - "service_id"
    properties:
      app_guid:
        type: "string"
        description: "Deprecated in favor of bind_resource.app_guid. GUID of an application\
          \ associated with the binding to be created. If present, MUST be a non-empty\
          \ string.\n"
      plan_id:
        type: "string"
        description: "ID of the plan from the catalog. MUST be a non-empty string.\n"
      service_id:
        type: "string"
        description: "ID of the service from the catalog. MUST be a non-empty string.\n"
      parameters:
        type: "object"
        description: "Configuration options for the service binding. An opaque object,\
          \ controller treats this as a blob. Brokers SHOULD ensure that the client\
          \ has provided valid configuration parameters and values for the operation.\n"
        properties: {}
      bind_resource:
        description: "A JSON object that contains data for platform resources associated\
          \ with the binding to be created. See Bind Resource Object for more information.\n"
        $ref: "#/definitions/BindResource"
    description: "Information to bind the service to an application.\n"
    example:
      app_guid: "app_guid"
      service_id: "service_id"
      bind_resource:
        app_guid: "app_guid"
        route: "route"
      parameters: "{}"
      plan_id: "plan_id"
  BindResource:
    type: "object"
    properties:
      app_guid:
        type: "string"
        description: "GUID of an application associated with the binding. For credentials\
          \ bindings.\n"
      route:
        type: "string"
        description: "URL of the application to be intermediated. For route services\
          \ bindings.\n"
    description: "The bind_resource object contains platform specific information\
      \ related to the context in which the service will be used. In some cases the\
      \ platform might not be able to provide this information at the time of the\
      \ binding request, therefore the bind_resource and its fields are OPTIONAL.\n"
    example:
      app_guid: "app_guid"
      route: "route"
  BindingResponse:
    type: "object"
    properties:
      credentials:
        type: "object"
        description: "A free-form hash of credentials that can be used by applications\
          \ or users to access the service.\n"
        properties: {}
      syslog_drain_url:
        type: "string"
        description: "A URL to which logs MUST be streamed. \"requires\":[\"syslog_drain\"\
          ] MUST be declared in the Catalog endpoint or the platform MUST consider\
          \ the response invalid.\n"
      route_service_url:
        type: "string"
        description: "A URL to which the platform MUST proxy requests for the address\
          \ sent with bind_resource.route in the request body. \"requires\":[\"route_forwarding\"\
          ] MUST be declared in the Catalog endpoint or the platform can consider\
          \ the response invalid.\n"
      volume_mounts:
        type: "array"
        description: "An array of configuration for mounting volumes. \"requires\"\
          :[\"volume_mount\"] MUST be declared in the Catalog endpoint or the platform\
          \ can consider the response invalid.\n"
        items:
          type: "object"
          properties: {}
    description: "Success binding response."
    example:
      route_service_url: "route_service_url"
      credentials: "{}"
      syslog_drain_url: "syslog_drain_url"
      volume_mounts:
      - "{}"
      - "{}"
  ServiceMetadata:
    type: "object"
    properties:
      displayName:
        type: "string"
        description: "The name of the service to be displayed in graphical clients."
      imageUrl:
        type: "string"
        description: "The URL to an image."
      longDescription:
        type: "string"
        description: "Long description"
      providerDisplayName:
        type: "string"
        description: "The name of the upstream entity providing the actual service."
      documentationUrl:
        type: "string"
        description: "Link to documentation page for service."
      supportUrl:
        type: "string"
        description: "Link to support for the service."
      extras:
        type: "object"
        description: "additional attributes"
        properties: {}
    description: "metadata related to the service. The attributes are defined by the\
      \ best practices [here](https://docs.cloudfoundry.org/services/catalog-metadata.html#services-metadata-fields)\n"
    example:
      longDescription: "longDescription"
      documentationUrl: "documentationUrl"
      providerDisplayName: "providerDisplayName"
      displayName: "displayName"
      imageUrl: "imageUrl"
      supportUrl: "supportUrl"
      extras: "{}"
  PlanMetadata:
    type: "object"
    properties:
      bullets:
        type: "string"
        description: "Features of this plan, to be displayed in a bulleted-list"
      costs:
        type: "object"
        description: "An array-of-objects that describes the costs of a service, in\
          \ what currency, and the unit of measure. If there are multiple costs, all\
          \ of them could be billed to the user (such as a monthly + usage costs at\
          \ once). Each object must provide the following keys: amount: { usd: float\
          \ }, unit: string This indicates the cost in USD of the service plan, and\
          \ how frequently the cost is occurred, such as âMONTHLYâ or âper 1000 messagesâ\
          . NOTE - this will be replaced by the ElasTest cost model.\n"
        properties: {}
      displayName:
        type: "string"
        description: "Name of the plan to be display in graphical clients."
      extras:
        type: "object"
        description: "additional attributes"
        properties: {}
    description: "This is the plan metadata as required by the CloudFoundry broker\
      \ best practices\n"
    example:
      costs: "{}"
      displayName: "displayName"
      extras: "{}"
      bullets: "bullets"
  LastOperation:
    type: "object"
    required:
    - "state"
    properties:
      state:
        type: "string"
        description: "Valid values are in progress, succeeded, and failed. While \"\
          state\": \"in progress\", the platform SHOULD continue polling. A response\
          \ with \"state\": \"succeeded\" or \"state\": \"failed\" MUST cause the\
          \ platform to cease polling.\n"
      description:
        type: "string"
        description: "A user-facing message displayed to the platform API client.\
          \ Can be used to tell the user details about the status of the operation.\
          \ If present, MUST be a non-empty string.\n"
    description: "status of polling last operation (async only)"
    example:
      description: "description"
      state: "state"
  Error:
    properties:
      description:
        type: "string"
        description: "\"An error message explaining why the request failed. This message\
          \ will be displayed to the user who initiated the request.\"\n"
    description: "Description of the error that occurred."
  UpdateOperationResponse:
    type: "object"
    properties:
      operation:
        type: "string"
        description: "For asynchronous responses, service brokers MAY return an identifier\
          \ representing the operation. The value of this field MUST be provided by\
          \ the platform with requests to the Last Operation endpoint in a URL encoded\
          \ query parameter. If present, MUST be a non-empty string.\n"
    description: "Response after issuing an update to a service instance\n"
    example:
      operation: "operation"
  Manifest:
    type: "object"
    required:
    - "id"
    - "manifest_content"
    - "manifest_type"
    - "plan_id"
    - "service_id"
    properties:
      id:
        type: "string"
        description: "An identifier used to correlate this manifest with the selected\
          \ plan and service. This MUST be globally unique within a platform marketplace.\
          \ MUST be a non-empty string. Using a GUID is RECOMMENDED.\n"
      plan_id:
        type: "string"
        description: "The plan the manifest should be associated with"
      service_id:
        type: "string"
        description: "The service type (id) the manifest should be assocaited with"
      manifest_type:
        type: "string"
        description: "The type of system that that manifest targets"
      manifest_content:
        type: "string"
        description: "The manifest content"
      endpoints:
        type: "object"
        description: "A set of endpoints that the service instance exposes. This includes\
          \ APIs and UIs."
        properties: {}
      config:
        type: "object"
        description: "configuration parameters to be supplied to a service instance.\
          \ this is not service instance specific"
        properties: {}
    description: "The manifest of a software component and the plan and service it\
      \ is to be associated with.\n"
    example:
      manifest_type: "manifest_type"
      endpoints: "{}"
      service_id: "service_id"
      id: "id"
      manifest_content: "manifest_content"
      config: "{}"
      plan_id: "plan_id"
  ServiceInstance:
    type: "object"
    properties:
      service_type:
        description: "the type of the service"
        $ref: "#/definitions/ServiceType"
      state:
        description: "the current state of the instance"
        $ref: "#/definitions/LastOperation"
      context:
        type: "object"
        description: "additional parameters of the service, including the service\
          \ ID, manifest ID and other state info"
        properties: {}
    description: "service instance"
    example:
      service_type:
        bindable: true
        metadata:
          longDescription: "longDescription"
          documentationUrl: "documentationUrl"
          providerDisplayName: "providerDisplayName"
          displayName: "displayName"
          imageUrl: "imageUrl"
          supportUrl: "supportUrl"
          extras: "{}"
        plan_updateable: false
        plans:
        - metadata:
            costs: "{}"
            displayName: "displayName"
            extras: "{}"
            bullets: "bullets"
          bindable: true
          name: "name"
          description: "description"
          id: "id"
          free: true
        - metadata:
            costs: "{}"
            displayName: "displayName"
            extras: "{}"
            bullets: "bullets"
          bindable: true
          name: "name"
          description: "description"
          id: "id"
          free: true
        name: "name"
        description: "description"
        short_name: "short_name"
        id: "id"
        dashboard_client:
          id: "id"
          secret: "secret"
          redirect_uri: "redirect_uri"
        tags:
        - "tags"
        - "tags"
        requires:
        - "requires"
        - "requires"
      context: "{}"
      state:
        description: "description"
        state: "state"
parameters:
  instance_id:
    name: "instance_id"
    in: "path"
    description: "'The instance_id of a service instance is provided by the client.\
      \ This ID will be used for future requests (bind and deprovision), so the broker\
      \ must use it to correlate the resource it creates.'\n"
    required: true
    type: "string"
  binding_id:
    name: "binding_id"
    in: "path"
    description: "The binding_id of a service binding is provided by the Cloud Controller."
    required: true
    type: "string"
  manifest_id:
    name: "manifest_id"
    in: "path"
    description: "The manifest_id of a manifest to be associated with a plan of a\
      \ servicetype.\n"
    required: true
    type: "string"
